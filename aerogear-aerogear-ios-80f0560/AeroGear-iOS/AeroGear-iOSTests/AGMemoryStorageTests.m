/*
 * JBoss, Home of Professional Open Source.
 * Copyright Red Hat, Inc., and individual contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <SenTestingKit/SenTestingKit.h>

#import "AGMemoryStorage.h"

@interface AGMemoryStorageTests : SenTestCase

@end

@implementation AGMemoryStorageTests {
    AGMemoryStorage* _memStore;
}

-(void)setUp {
    [super setUp];
    
    AGStoreConfiguration* config = [[AGStoreConfiguration alloc] init];
    [config setRecordId:@"id"];
    
    _memStore = [AGMemoryStorage storeWithConfig:config];
}

-(void)tearDown {
    _memStore = nil;

    [super tearDown];
}

-(void) testMemoryStorageCreation {
    STAssertNotNil(_memStore, @"storage should not be nil");
}

-(void) testSave {
    NSMutableDictionary* user = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"Robert",@"name",@"0",@"id", nil];
    
    BOOL success = [_memStore save:user error:nil];
    STAssertTrue(success, @"save should have succeeded");
}

-(void) testSaveWithOutId {
    NSMutableDictionary* user = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"Robert",@"name", nil];
    
    BOOL success = [_memStore save:user error:nil];
    STAssertTrue(success, @"save should have succeeded");
}

-(void) testSaveAutoGeneratedId {
    NSMutableDictionary* user = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"Robert",@"name", nil];
    
    BOOL success = [_memStore save:user error:nil];
    STAssertTrue(success, @"save should have succeeded");

    // save should have set the ID
    STAssertNotNil([user valueForKey:@"id"], @"object should not be nil");
}

-(void) testSaveWithNoIdAndCustomIdSetting {
    NSMutableDictionary* user = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"Robert",@"name", nil];
    
    
    AGStoreConfiguration* config = [[AGStoreConfiguration alloc] init];
    // apply a custom ID config...
    [config setRecordId:@"myId"];
    // re init the store:
    _memStore = [AGMemoryStorage storeWithConfig:config];

    BOOL success = [_memStore save:user error:nil];
    STAssertTrue(success, @"save should have succeeded");

    // save should have set custom ID
    STAssertNotNil([user valueForKey:@"myId"], @"object should not be nil");
}

-(void) testRead {
    NSMutableDictionary* user = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"Robert",@"name",@"0",@"id", nil];

    //save it
    BOOL success = [_memStore save:user error:nil];
    STAssertTrue(success, @"save should have succeeded");

    // read it
    NSMutableDictionary* read = [_memStore read:@"0"];
    STAssertEqualObjects(@"Robert", [read valueForKey:@"name"], @"should be equal");
}

-(void) testReadNonExisting {
    NSMutableDictionary* user = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"Robert",@"name",@"0",@"id", nil];
    
    // save it
    BOOL success = [_memStore save:user error:nil];
    STAssertTrue(success, @"save should have succeeded");
    
    // read it
    NSMutableDictionary* read = [_memStore read:@"1"];
    STAssertNil(read, @"object should be nil");
}

-(void) testRemove {
    NSMutableDictionary* user = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"0",@"id", @"Robert",@"name", nil];

    BOOL success;
    
    // save it
    success = [_memStore save:user error:nil];
    STAssertTrue(success, @"save should have succeeded");
    
    // read it
    NSMutableDictionary* readSaved = [_memStore read:@"0"];
    STAssertEqualObjects(@"Robert", [readSaved valueForKey:@"name"], @"should be equal");

    // remove it
    success = [_memStore remove:readSaved error:nil];
    STAssertTrue(success, @"remove should have succeeded");

    // read it
    NSMutableDictionary* readRemoved = [_memStore read:@"0"];
    STAssertNil(readRemoved, @"object should be nil");
}

-(void) testRemoveNonExisting {
    NSMutableDictionary* user = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"0",@"id", @"Robert",@"name", nil];
    
    BOOL success;
    
    // save it
    success = [_memStore save:user error:nil];
    STAssertTrue(success, @"save should have succeeded");
    
    // read it
    NSMutableDictionary* readSaved = [_memStore read:@"0"];
    STAssertEqualObjects(@"Robert", [readSaved valueForKey:@"name"], @"should be equal");
    
    // remove non existant
    NSMutableDictionary* noUser = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"1",@"id", @"Robert",@"name", nil];
    
    success = [_memStore remove:noUser error:nil];
    STAssertTrue(success, @"remove should NOT HAVE succeeded");
    
    // read it
    NSMutableDictionary* readExisting = [_memStore read:@"0"];
    STAssertEqualObjects(@"Robert", [readExisting valueForKey:@"name"], @"should be equal");
}

-(void) testReset {
    NSMutableDictionary* user1 = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"0",@"id", @"Robert",@"name", nil];
    NSMutableDictionary* user2 = [NSMutableDictionary
                                 dictionaryWithObjectsAndKeys:@"1",@"id", @"John",@"name", nil];
    
    
    NSArray* users = [NSArray arrayWithObjects:user1, user2, nil];

    BOOL success;
    
    // save objects
    success = [_memStore save:users error:nil];
    STAssertTrue(success, @"save should have succeeded");

    // read first object
    NSMutableDictionary* readFirstObject = [_memStore read:@"0"];
    STAssertEqualObjects(@"Robert", [readFirstObject valueForKey:@"name"], @"should be equal");
    
    // read second object
    NSMutableDictionary* readSecondObject = [_memStore read:@"1"];
    STAssertEqualObjects(@"John", [readSecondObject valueForKey:@"name"], @"should be equal");

    // reset all objects
    success = [_memStore reset:nil];
    STAssertTrue(success, @"reset should not have failed");
    
    NSMutableDictionary *readRemoved;
    
    // read first object
    readRemoved = [_memStore read:@"0"];
    STAssertNil(readRemoved, @"object should be nil");
    
    // read second object
    readRemoved = [_memStore read:@"1"];
    STAssertNil(readRemoved, @"object should be nil");
}

-(void) testFilter {
    NSMutableDictionary* user1 = [@{@"id" : @"0",
                                    @"name" : @"Robert",
                                    @"city" : @"Boston",
                                    @"salary" : [NSNumber numberWithInt:2100],
                                    @"department" : @{@"name" : @"Software", @"address" : @"Cornwell"},
                                    @"experience" : @[@{@"language" : @"Java", @"level" : @"advanced"},
                                                      @{@"language" : @"C", @"level" : @"advanced"}]
                                  } mutableCopy];
    
    NSMutableDictionary* user2 = [@{@"id" : @"1",
                                    @"name" : @"David",
                                    @"city" : @"New York",
                                    @"salary" : [NSNumber numberWithInt:1400],
                                    @"department" : @{@"name" : @"Hardware", @"address" : @"Cornwell"},
                                    @"experience" : @[@{@"language" : @"Java", @"level" : @"advanced"},
                                                      @{@"language" : @"Python", @"level" : @"intermediate"}]
                                  } mutableCopy];

    NSMutableDictionary* user3 = [@{@"id" : @"2",
                                    @"name" : @"Peter",
                                    @"city" : @"New York",
                                    @"salary" : [NSNumber numberWithInt:1800],
                                    @"department" : @{@"name" : @"Software", @"address" : @"Branton"},
                                    @"experience" : @[@{@"language" : @"Java", @"level" : @"advanced"},
                                                      @{@"language" : @"C", @"level" : @"intermediate"}]
                                  } mutableCopy];
    
    NSMutableDictionary* user4 = [@{@"id" : @"3",
                                    @"name" : @"John",
                                    @"city" : @"Boston",
                                    @"salary" : [NSNumber numberWithInt:1700],
                                    @"department" : @{@"name" : @"Software", @"address" : @"Norwell"},
                                    @"experience" : @[@{@"language" : @"Java", @"level" : @"intermediate"},
                                                      @{@"language" : @"JavaScript", @"level" : @"advanced"}]
                                  } mutableCopy];
    
    NSMutableDictionary* user5 = [@{@"id" : @"4",
                                    @"name" : @"Graham",
                                    @"city" : @"Boston",
                                    @"salary" : [NSNumber numberWithInt:2400],
                                    @"department" : @{@"name" : @"Software", @"address" : @"Underwood"},
                                    @"experience" : @[@{@"language" : @"Java", @"level" : @"advanced"},
                                                      @{@"language" : @"Python", @"level" : @"advanced"}]
                                  } mutableCopy];
    
    NSArray* users = @[user1, user2, user3, user4, user5];
    
    // save objects
    BOOL success = [_memStore save:users error:nil];
    STAssertTrue(success, @"save should have succeeded");

    NSPredicate* predicate;
    NSArray* results;
    
    // filter objects
    predicate = [NSPredicate
                              predicateWithFormat:@"city = 'Boston' AND department.name = 'Software' \
                              AND SUBQUERY(experience, $x, $x.language = 'Java' AND $x.level = 'advanced').@count > 0" ];

    results = [_memStore filter:predicate];

    // validate size
    STAssertEquals((NSUInteger)2, [results count], @"Must be size 2");
    // validate each object
    for (NSDictionary* user in results) {
        STAssertEquals(user[@"city"], @"Boston", @"city must be 'Boston'");
        STAssertEquals(user[@"department"][@"name"],  @"Software", @"department must be 'Software'");

        BOOL contains = [user[@"experience"] containsObject:@{@"language" : @"Java", @"level" : @"advanced"}];
        STAssertTrue(contains, @"should contain object with language 'Java' and level 'advanced'");
    }
    
    // retrieve only users with knowledge of BOTH Java AND Ruby (should be none)
    predicate = [NSPredicate
                 predicateWithFormat:@"SUBQUERY(experience, $x, $x.language IN {'Java', 'Ruby'}).@count = 2"];
    
    results = [_memStore filter:predicate];

    // validate size
    STAssertEquals((NSUInteger)0, [results count], @"Must be size 0");
    
    // retrieve users with the specified salaries
    predicate = [NSPredicate
                 predicateWithFormat:@"department.name = 'Software' AND salary BETWEEN {1500, 2000}"];
    
    results = [_memStore filter:predicate];

    // validate size
    STAssertEquals((NSUInteger)2, [results count], @"Must be size 2");

    // validate each object
    for (NSDictionary* user in results) {
        STAssertEquals(user[@"department"][@"name"],  @"Software", @"department must be 'Software'");
        STAssertTrue([user[@"salary"] intValue]>=1500 && [user[@"salary"] intValue]<=2000 , @"salary not in range");
    }
}

-(void) testReadAll {
    NSMutableDictionary* user1 = [NSMutableDictionary
                                  dictionaryWithObjectsAndKeys:@"0",@"id", @"Robert",@"name", nil];
    NSMutableDictionary* user2 = [NSMutableDictionary
                                  dictionaryWithObjectsAndKeys:@"1",@"id", @"John",@"name", nil];
    
    
    NSArray* users = [NSArray arrayWithObjects:user1, user2, nil];
    
    BOOL success;
    
    // save objects
    success = [_memStore save:users error:nil];
    STAssertTrue(success, @"save should have succeeded");

    
    NSArray* objects = [_memStore readAll];
    
    STAssertEquals((NSUInteger)2, [objects count], @"Must be equal size");

    STAssertTrue([objects containsObject:user1], @"store should contain object");
    STAssertTrue([objects containsObject:user2], @"store should contain object");
}

-(void)testReadWithEmptyStore {
    NSMutableDictionary *user = [_memStore read:@"0"];
    STAssertNil(user, @"object should be nil");
}

-(void)testReadAllWithEmptyStore {
    NSArray* readAll = [_memStore readAll];
    
    STAssertEquals((NSUInteger)0, [readAll count], @"Must be size 0");
}

@end
